{
  "address": "0xF4baA49b69EA15107d78AD097d2457cDF470E25B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "editionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "AuctionApprovalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum Implementation",
              "name": "implementation",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Edition",
          "name": "edition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SeededEditionPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum Implementation",
              "name": "implementation",
              "type": "uint8"
            }
          ],
          "internalType": "struct Edition",
          "name": "edition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct Step",
          "name": "step",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum Implementation",
              "name": "implementation",
              "type": "uint8"
            }
          ],
          "internalType": "struct Edition",
          "name": "edition",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setAuctionApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa64a550cd3faee9f563925740ce51d151d4173cdc6d6f42c22bd6b8ae0e28a91",
  "receipt": {
    "to": null,
    "from": "0x5f0009F23251fEB0f58c8e3aAb8E096Af16FaECD",
    "contractAddress": "0xF4baA49b69EA15107d78AD097d2457cDF470E25B",
    "transactionIndex": 18,
    "gasUsed": "1836384",
    "logsBloom": "0x0000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000000000000010000000000400000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000008000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000010000100000",
    "blockHash": "0x5d57eb21939ba55c61e66df21784e22d93564eda4d019672d8d29a5710365468",
    "transactionHash": "0xa64a550cd3faee9f563925740ce51d151d4173cdc6d6f42c22bd6b8ae0e28a91",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 26347772,
        "transactionHash": "0xa64a550cd3faee9f563925740ce51d151d4173cdc6d6f42c22bd6b8ae0e28a91",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f0009f23251feb0f58c8e3aab8e096af16faecd",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000343173bed5ca40000000000000000000000000000000000000000000000000217bf4301fc964820000000000000000000000000000000000000000000016d8e1811d35a0d678230000000000000000000000000000000000000000000000002147c2bc60f39a420000000000000000000000000000000000000000000016d8e1b54ea95fac4263",
        "logIndex": 38,
        "blockHash": "0x5d57eb21939ba55c61e66df21784e22d93564eda4d019672d8d29a5710365468"
      }
    ],
    "blockNumber": 26347772,
    "cumulativeGasUsed": "15792727",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a6de12d183bb5b1c43c08d6dca852edf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"editionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"AuctionApprovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum Implementation\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SeededEditionPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum Implementation\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Step\",\"name\":\"step\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum Implementation\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setAuctionApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAuction((address,uint8),uint256,uint256,uint256,uint256,uint8,address,uint256,address)\":{\"details\":\"Store the auction details in the auctions mapping and emit an AuctionCreated event. If there is no curator, or if the curator is the auction creator, automatically approve the auction and emit an AuctionApproved event.\",\"params\":{\"curator\":\"the address of the allocated curator\",\"curatorRoyaltyBPS\":\"the royalty the curator will recieve per purchase in basis points\",\"duration\":\"the duration the auction will run for\",\"edition\":\"the contract address and implementation of which NFT's will be minted\",\"endPrice\":\"the price in eth the auction will end at\",\"numberOfPriceDrops\":\"the number of times the price will drop between starting and ending price\",\"startPrice\":\"the price in eth the auction will start at\",\"startTimestamp\":\"the time the auction will start\"},\"returns\":{\"_0\":\"auction id\"}},\"getSalePrice(uint256)\":{\"details\":\"calculates the price based on the block.timestamp\",\"params\":{\"auctionId\":\"the id of the auction\"},\"returns\":{\"_0\":\"price in wei\"}},\"purchase(uint256,uint256)\":{\"details\":\"mints a NFT and splits purchase fee between creator and curator\",\"params\":{\"auctionId\":\"the id of the auction\",\"value\":\"the amount paid in erc-20 tokens to mint\"},\"returns\":{\"_0\":\"id of the NFT\"}},\"purchase(uint256,uint256,uint256)\":{\"details\":\"mints a seeded NFT and splits purchase fee between creator and curator\",\"params\":{\"auctionId\":\"the id of the auction\",\"seed\":\"the seed of the NFT to mint\",\"value\":\"the amount paid in erc-20 tokens to mint\"},\"returns\":{\"_0\":\"id of the NFT\"}},\"setAuctionApproval(uint256,bool)\":{\"details\":\"sets auction approved to approval and emits an AuctionApprovalUpdated event\",\"params\":{\"approved\":\"the curators approval decision\",\"auctionId\":\"the id of the auction\"}}},\"title\":\"An open dutch auction house, for initial drops of limited edition nft contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"createAuction((address,uint8),uint256,uint256,uint256,uint256,uint8,address,uint256,address)\":{\"notice\":\"Create an auction.\"},\"getSalePrice(uint256)\":{\"notice\":\"gets the current sale price of an auction\"},\"setAuctionApproval(uint256,bool)\":{\"notice\":\"allows curator to approve auction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EditionsAuction.sol\":\"EditionsAuction\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/EditionsAuction.sol\":{\"content\":\"// Sketch of dutch auction drop mechanic for Zora NFT editions\\n// WIP do not use!\\n\\n// TODO: rentrence checks (see auction house contract)\\n// TODO: documentation\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IEditionSingleMintable} from \\\"./editions-nft/IEditionSingleMintable.sol\\\";\\nimport {ISeededEditionSingleMintable, MintData} from \\\"./editions-nft/ISeededEditionSingleMintable.sol\\\";\\nimport {IEditionsAuction, Edition, Step, Implementation} from \\\"./IEditionsAuction.sol\\\";\\n\\n/**\\n * @title An open dutch auction house, for initial drops of limited edition nft contracts.\\n */\\ncontract EditionsAuction is IEditionsAuction, ReentrancyGuard{\\n  using SafeMath for uint256;\\n  using Counters for Counters.Counter;\\n  using SafeERC20 for IERC20;\\n\\n  // minimum time interval before price can drop in seconds\\n  uint8 minStepTime;\\n\\n  bytes4 constant ERC721_interfaceId = 0x80ac58cd; // ERC-721 interface\\n  bytes4[2] editionsImplentaion_interfaceIds;\\n\\n  // A mapping of all the auctions currently running\\n  mapping (uint256 => IEditionsAuction.Auction) public auctions;\\n\\n  Counters.Counter private _auctionIdTracker;\\n\\n  /**\\n   * @notice Require that the specified auction exists\\n   */\\n  modifier auctionExists(uint256 auctionId) {\\n    require(_exists(auctionId), \\\"Auction doesn't exist\\\");\\n    _;\\n  }\\n\\n  modifier auctionPurchaseChecks(uint256 auctionId) {\\n    require(auctions[auctionId].approved, \\\"Auction has not been approved\\\");\\n    require(block.timestamp >= auctions[auctionId].startTimestamp, \\\"Auction has not started yet\\\");\\n    require( _numberCanMint(auctionId) != 0, \\\"Sold out\\\");\\n    _;\\n  }\\n\\n  /**\\n   * Constructor\\n   */\\n  constructor() {\\n    minStepTime = 2 * 60; // 2 minutes\\n    editionsImplentaion_interfaceIds[uint8(Implementation.edition)] = 0x2fc51e5a;\\n    editionsImplentaion_interfaceIds[uint8(Implementation.seededEdition)] = 0x26057e5e;\\n  }\\n\\n  /**\\n   * @notice Create an auction.\\n   * @dev Store the auction details in the auctions mapping and emit an AuctionCreated event.\\n   * If there is no curator, or if the curator is the auction creator,\\n   * automatically approve the auction and emit an AuctionApproved event.\\n   * @param edition the contract address and implementation of which NFT's will be minted\\n   * @param startTimestamp the time the auction will start\\n   * @param duration the duration the auction will run for\\n   * @param startPrice the price in eth the auction will start at\\n   * @param endPrice the price in eth the auction will end at\\n   * @param numberOfPriceDrops the number of times the price will drop between starting and ending price\\n   * @param curator the address of the allocated curator\\n   * @param curatorRoyaltyBPS the royalty the curator will recieve per purchase in basis points\\n   * @return auction id\\n   */\\n  function createAuction(\\n    Edition memory edition,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  ) external override nonReentrant returns (uint256) {\\n    require(\\n      IERC165(edition.id).supportsInterface(ERC721_interfaceId),\\n      \\\"Doesn't support NFT interface\\\"\\n    );\\n\\n    require(\\n      IERC165(edition.id).supportsInterface(\\n        editionsImplentaion_interfaceIds[uint8(edition.implementation)]\\n      ),\\n      \\\"Doesn't support chosen Editions interface\\\"\\n    );\\n\\n    // TODO: require(IEditionSingleMintable(editionContract).numberCanMint() != type(uint256).max, \\\"Editions must be a limited number\\\")\\n    // TODO: require this contract is approved ??\\n    // TODO: require curator rolaty not too high\\n\\n    address creator = IEditionSingleMintable(edition.id).owner();\\n    require(msg.sender == creator, \\\"Caller must be creator of editions\\\");\\n    require(startPrice > endPrice, \\\"Start price must be higher then end price\\\");\\n    if(curator == address(0)){\\n      require(curatorRoyaltyBPS == 0, \\\"Royalties would be sent into the void\\\");\\n    }\\n\\n    // NOTE: calc with function to get past CompilerError: Stack too deep,\\n    Step memory step = _calcStep(\\n      duration,\\n      startPrice,\\n      endPrice,\\n      numberOfPriceDrops\\n    );\\n\\n    require(step.time >= minStepTime, \\\"Step time must be higher than minimuim step time\\\");\\n\\n    uint256 auctionId = _auctionIdTracker.current();\\n\\n    auctions[auctionId] = Auction({\\n      edition: edition,\\n      startTimestamp: startTimestamp,\\n      duration: duration,\\n      startPrice: startPrice,\\n      endPrice: endPrice,\\n      numberOfPriceDrops: numberOfPriceDrops,\\n      creator: creator,\\n      step: step,\\n      approved: false,\\n      curator: curator,\\n      curatorRoyaltyBPS: curatorRoyaltyBPS,\\n      auctionCurrency: auctionCurrency\\n    });\\n\\n    _auctionIdTracker.increment();\\n\\n    emit AuctionCreated(\\n      auctionId,\\n      creator,\\n      edition,\\n      startTimestamp,\\n      duration,\\n      startPrice,\\n      endPrice,\\n      numberOfPriceDrops,\\n      curator,\\n      curatorRoyaltyBPS,\\n      auctionCurrency\\n    );\\n\\n    // auto approve auction\\n    if(curator == address(0) || curator == creator){\\n      _approveAuction(auctionId, true);\\n    }\\n\\n    return auctionId;\\n  }\\n\\n\\n\\n  function _calcStep (\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops\\n  ) internal pure returns (Step memory) {\\n\\n    Step memory step;\\n\\n    step.price = startPrice.sub(endPrice).div(numberOfPriceDrops);\\n    step.time = duration.div(numberOfPriceDrops);\\n\\n    return step;\\n  }\\n\\n  /**\\n   * @dev mints a NFT and splits purchase fee between creator and curator\\n   * @param auctionId the id of the auction\\n   * @param value the amount paid in erc-20 tokens to mint\\n   * @return id of the NFT\\n   */\\n  function purchase(\\n    uint256 auctionId,\\n    uint256 value\\n  ) external payable override\\n    auctionExists(auctionId)\\n    auctionPurchaseChecks(auctionId)\\n    returns (uint256)\\n  {\\n    // check edtions contract is standard implementation\\n    require(\\n      auctions[auctionId].edition.implementation == Implementation.edition,\\n      \\\"Must be edition contract\\\"\\n    );\\n\\n    uint256 salePrice = _getSalePrice(auctionId);\\n    require(value >= salePrice, \\\"Must be more or equal to sale price\\\");\\n\\n    // if not free carry out purchase\\n    if(salePrice != 0){\\n      _handlePurchasePayment(auctionId, salePrice);\\n    }\\n\\n    address[] memory toMint = new address[](1);\\n    toMint[0] = msg.sender;\\n\\n    // mint new nft\\n    uint256 atEditionId = IEditionSingleMintable(auctions[auctionId].edition.id).mintEditions(toMint);\\n\\n    // subtract 1 to get the id of the token minted\\n    uint256 tokenId = atEditionId.sub(1);\\n\\n    emit EditionPurchased(\\n      auctionId,\\n      auctions[auctionId].edition.id,\\n      tokenId,\\n      salePrice,\\n      msg.sender\\n    );\\n\\n    return atEditionId;\\n  }\\n\\n  /**\\n   * @dev mints a seeded NFT and splits purchase fee between creator and curator\\n   * @param auctionId the id of the auction\\n   * @param value the amount paid in erc-20 tokens to mint\\n   * @param seed the seed of the NFT to mint\\n   * @return id of the NFT\\n   */\\n  function purchase(\\n    uint256 auctionId,\\n    uint256 value,\\n    uint256 seed\\n  ) external payable override\\n    auctionExists(auctionId)\\n    auctionPurchaseChecks(auctionId)\\n    returns (uint256)\\n  {\\n    // check edtions contract is seeded implementation\\n    require(\\n      auctions[auctionId].edition.implementation == Implementation.seededEdition,\\n      \\\"Must be seeded edition contract\\\"\\n    );\\n\\n    // check value is more or equal to current sale price\\n    uint256 salePrice = _getSalePrice(auctionId);\\n    require(value >= salePrice, \\\"Must be more or equal to sale price\\\");\\n\\n    // if not free handle payment\\n    if(salePrice != 0){\\n      _handlePurchasePayment(auctionId, salePrice);\\n    }\\n\\n    MintData[] memory toMint = new MintData[](1);\\n    toMint[0] = MintData(msg.sender, seed);\\n\\n    // mint new nft\\n    uint256 atEditionId = ISeededEditionSingleMintable(auctions[auctionId].edition.id).mintEditions(toMint);\\n\\n    // subtract 1 to get the id of the token minted\\n    uint256 tokenId = atEditionId.sub(1);\\n\\n    emit SeededEditionPurchased(\\n      auctionId,\\n      auctions[auctionId].edition.id,\\n      tokenId,\\n      seed,\\n      salePrice,\\n      msg.sender\\n    );\\n\\n    return atEditionId;\\n  }\\n\\n  function numberCanMint(uint256 auctionId) external view override returns (uint256) {\\n    return _numberCanMint(auctionId);\\n  }\\n\\n  /**\\n   * @notice allows curator to approve auction\\n   * @dev sets auction approved to approval and emits an AuctionApprovalUpdated event\\n   * @param auctionId the id of the auction\\n   * @param approved the curators approval decision\\n   */\\n  function setAuctionApproval(uint256 auctionId, bool approved) external override auctionExists(auctionId) {\\n    require(msg.sender == auctions[auctionId].curator, \\\"must be curator\\\");\\n    require(block.timestamp < auctions[auctionId].startTimestamp, \\\"Auction has already started\\\");\\n    // TODO: see if auction should be cancled/ended if approval is set to false?\\n    _approveAuction(auctionId, approved);\\n  }\\n\\n  /**\\n   * @notice gets the current sale price of an auction\\n   * @dev calculates the price based on the block.timestamp\\n   * @param auctionId the id of the auction\\n   * @return price in wei\\n   */\\n  function getSalePrice(uint256 auctionId) external view override returns (uint256) {\\n    return _getSalePrice(auctionId);\\n  }\\n\\n  function _handlePurchasePayment(uint256 auctionId, uint256 salePrice) internal{\\n    IERC20 token = IERC20(auctions[auctionId].auctionCurrency);\\n\\n    // NOTE: msg.sender would need to approve this contract with currency before making a purchase\\n    // If intergrating with zora v3 the market would hold the funds and handle royalties differently.\\n    // through royalties finders, and protocal fees\\n    // TODO: respect royalties on NFT contract (v3 intergration could solve this)\\n\\n    // NOTE: modified from v3 for now. A full intergration would be better if we go that route\\n    // https://github.com/ourzora/v3/blob/main/contracts/common/IncomingTransferSupport/V1/IncomingTransferSupportV1.sol\\n\\n    // We must check the balance that was actually transferred to this contract,\\n    // as some tokens impose a transfer fee and would not actually transfer the\\n    // full amount to the market, resulting in potentally locked funds\\n    uint256 beforeBalance = token.balanceOf(address(this));\\n    token.safeTransferFrom(msg.sender, address(this), salePrice);\\n    uint256 afterBalance = token.balanceOf(address(this));\\n    require(beforeBalance + salePrice == afterBalance, \\\"_handleIncomingTransfer token transfer call did not transfer expected amount\\\");\\n\\n    // if no curator, add payment to creator\\n    if(auctions[auctionId].curator == address(0)){\\n      token.safeTransfer(\\n        auctions[auctionId].creator,\\n        salePrice\\n      );\\n    }\\n\\n    // else split payment between curator and creator\\n    else {\\n      uint256 curatorFee = (salePrice.mul(auctions[auctionId].curatorRoyaltyBPS)).div(10000);\\n      token.safeTransfer(\\n        auctions[auctionId].curator,\\n        curatorFee\\n      );\\n\\n      uint256 creatorFee = salePrice.sub(curatorFee);\\n      token.safeTransfer(\\n        auctions[auctionId].creator,\\n        creatorFee\\n      );\\n    }\\n\\n    return;\\n  }\\n\\n  function _numberCanMint(uint256 auctionId) internal view returns (uint256) {\\n    return IEditionSingleMintable(auctions[auctionId].edition.id).numberCanMint();\\n  }\\n\\n  function _exists(uint256 auctionId) internal view returns(bool) {\\n    return auctions[auctionId].creator != address(0);\\n  }\\n\\n  function _approveAuction(uint256 auctionId, bool approved) internal {\\n    auctions[auctionId].approved = approved;\\n    emit AuctionApprovalUpdated(auctionId, auctions[auctionId].edition.id, approved);\\n  }\\n\\n  function _getSalePrice(uint256 auctionId) internal view returns (uint256) {\\n    // return endPrice if auction is over\\n    if(block.timestamp > auctions[auctionId].startTimestamp.add(auctions[auctionId].duration)){\\n      return auctions[auctionId].endPrice;\\n    }\\n\\n    // return startPrice if auction hasn't started yet\\n    if(block.timestamp < auctions[auctionId].startTimestamp.add(auctions[auctionId].step.time)){\\n      return auctions[auctionId].startPrice;\\n    }\\n\\n    // calculate price based of block.timestamp\\n    uint256 timeSinceStart = block.timestamp.sub(auctions[auctionId].startTimestamp);\\n    uint256 remainder = timeSinceStart.mod(auctions[auctionId].step.time);\\n    uint256 dropNum = timeSinceStart.sub(remainder).div(auctions[auctionId].step.time);\\n\\n    // transalte -1 so endPrice is after auction.duration\\n    return auctions[auctionId].startPrice.sub(auctions[auctionId].step.price.mul(dropNum - 1));\\n  }\\n  // TODO: endAuction end everything if sold out remove form auctions mapping?\\n}\",\"keccak256\":\"0x3e68a68aa84f3fad4456ca355112c8e1d3834f5544f61fefee0f453ff3be001e\",\"license\":\"GPL-3.0\"},\"contracts/IEditionsAuction.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nenum Implementation {\\n  edition,\\n  seededEdition\\n}\\n\\nstruct Edition {\\n  address id;\\n  Implementation implementation;\\n}\\n\\nstruct Step {\\n  uint256 price;\\n  uint256 time;\\n}\\n\\ninterface IEditionsAuction {\\n  struct Auction {\\n    Edition edition;\\n    uint256 startTimestamp;\\n    uint256 duration;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint8 numberOfPriceDrops;\\n    address creator;\\n    Step step;\\n    bool approved;\\n    address curator;\\n    uint256 curatorRoyaltyBPS;\\n    address auctionCurrency;\\n  }\\n\\n  event EditionPurchased(\\n    uint256 auctionId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    uint256 price,\\n    address owner\\n  );\\n\\n  event SeededEditionPurchased(\\n    uint256 auctionId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    uint256 seed,\\n    uint256 price,\\n    address owner\\n  );\\n\\n  event AuctionCreated(\\n    uint256 auctionId,\\n    address creator,\\n    Edition edition,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  );\\n\\n  event AuctionApprovalUpdated(\\n    uint256 auctionId,\\n    address editionContract,\\n    bool approved\\n  );\\n\\n  function createAuction(\\n    Edition memory edition,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  ) external returns (uint256);\\n\\n  function setAuctionApproval(uint auctionId, bool approved) external;\\n\\n  function getSalePrice(uint256 auctionId) external returns (uint256);\\n\\n  function purchase(uint256 auctionId, uint256 amount) external payable returns (uint256);\\n  function purchase(uint256 auctionId, uint256 amount, uint256 seed) external payable returns (uint256);\\n\\n  function numberCanMint(uint256 auctionId) external view returns (uint256);\\n}\",\"keccak256\":\"0x1132a23d8ffbea76f8576b0def229cd4e83ec86f34603d1d9ca79ac7c7bab566\",\"license\":\"GPL-3.0\"},\"contracts/editions-nft/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"contracts/editions-nft/ISeededEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nstruct MintData {\\n  address to;\\n  uint256 seed;\\n}\\n\\ninterface ISeededEditionSingleMintable {\\n  function mintEdition(address to, uint256 seed) external returns (uint256);\\n  function mintEditions(MintData[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x758c5770e6ebfba6a7b4d027125b7acf1692088e30bc966b30671686feff2355\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createAuction((address,uint8),uint256,uint256,uint256,uint256,uint8,address,uint256,address)": {
        "details": "Store the auction details in the auctions mapping and emit an AuctionCreated event. If there is no curator, or if the curator is the auction creator, automatically approve the auction and emit an AuctionApproved event.",
        "params": {
          "curator": "the address of the allocated curator",
          "curatorRoyaltyBPS": "the royalty the curator will recieve per purchase in basis points",
          "duration": "the duration the auction will run for",
          "edition": "the contract address and implementation of which NFT's will be minted",
          "endPrice": "the price in eth the auction will end at",
          "numberOfPriceDrops": "the number of times the price will drop between starting and ending price",
          "startPrice": "the price in eth the auction will start at",
          "startTimestamp": "the time the auction will start"
        },
        "returns": {
          "_0": "auction id"
        }
      },
      "getSalePrice(uint256)": {
        "details": "calculates the price based on the block.timestamp",
        "params": {
          "auctionId": "the id of the auction"
        },
        "returns": {
          "_0": "price in wei"
        }
      },
      "purchase(uint256,uint256)": {
        "details": "mints a NFT and splits purchase fee between creator and curator",
        "params": {
          "auctionId": "the id of the auction",
          "value": "the amount paid in erc-20 tokens to mint"
        },
        "returns": {
          "_0": "id of the NFT"
        }
      },
      "purchase(uint256,uint256,uint256)": {
        "details": "mints a seeded NFT and splits purchase fee between creator and curator",
        "params": {
          "auctionId": "the id of the auction",
          "seed": "the seed of the NFT to mint",
          "value": "the amount paid in erc-20 tokens to mint"
        },
        "returns": {
          "_0": "id of the NFT"
        }
      },
      "setAuctionApproval(uint256,bool)": {
        "details": "sets auction approved to approval and emits an AuctionApprovalUpdated event",
        "params": {
          "approved": "the curators approval decision",
          "auctionId": "the id of the auction"
        }
      }
    },
    "title": "An open dutch auction house, for initial drops of limited edition nft contracts.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "createAuction((address,uint8),uint256,uint256,uint256,uint256,uint8,address,uint256,address)": {
        "notice": "Create an auction."
      },
      "getSalePrice(uint256)": {
        "notice": "gets the current sale price of an auction"
      },
      "setAuctionApproval(uint256,bool)": {
        "notice": "allows curator to approve auction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1194,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "minStepTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 1201,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "editionsImplentaion_interfaceIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes4)2_storage"
      },
      {
        "astId": 1206,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Auction)2123_storage)"
      },
      {
        "astId": 1209,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "_auctionIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)760_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes4)2_storage": {
        "base": "t_bytes4",
        "encoding": "inplace",
        "label": "bytes4[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(Implementation)2085": {
        "encoding": "inplace",
        "label": "enum Implementation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Auction)2123_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEditionsAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)2123_storage"
      },
      "t_struct(Auction)2123_storage": {
        "encoding": "inplace",
        "label": "struct IEditionsAuction.Auction",
        "members": [
          {
            "astId": 2099,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "edition",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Edition)2091_storage"
          },
          {
            "astId": 2101,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2103,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2105,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "startPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2107,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "endPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2109,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "numberOfPriceDrops",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 2111,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "creator",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2114,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "step",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Step)2096_storage"
          },
          {
            "astId": 2116,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "approved",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 2118,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "curator",
            "offset": 1,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 2120,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "curatorRoyaltyBPS",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2122,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "auctionCurrency",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Counter)760_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 759,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Edition)2091_storage": {
        "encoding": "inplace",
        "label": "struct Edition",
        "members": [
          {
            "astId": 2087,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2090,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "implementation",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(Implementation)2085"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Step)2096_storage": {
        "encoding": "inplace",
        "label": "struct Step",
        "members": [
          {
            "astId": 2093,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2095,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}